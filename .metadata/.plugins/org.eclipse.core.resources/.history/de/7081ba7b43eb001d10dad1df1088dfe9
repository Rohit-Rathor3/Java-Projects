package com.rohit.blog.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.rohit.blog.security.CustomUserDetailsService;
import com.rohit.blog.security.JwtAuthenticationEntryPoint;
import com.rohit.blog.security.JwtAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	private CustomUserDetailsService customUserDetailsService;
	@Autowired
	private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
	@Autowired
	private JwtAuthenticationFilter jwtAuthenticationFilter;
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		System.out.println("-------------------------filter chain----------");
		 http
		 .csrf()
		 .disable()
		 .authorizeHttpRequests().requestMatchers("/api/v1/auth/login").permitAll()
		 .anyRequest().permitAll()
		 .and().userDetailsService(customUserDetailsService)
		 .exceptionHandling()
		 .authenticationEntryPoint(this.jwtAuthenticationEntryPoint)
		 .and()
		 .sessionManagement()
		 .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		 http.addFilterBefore(this.jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
		 http.authenticationProvider(daoAuthenticationProvider());
		 DefaultSecurityFilterChain defaultSecurityFilterChain = http.build();
		 return defaultSecurityFilterChain;
	}

	@Bean
	public AuthenticationManager authenticationManagerBean(AuthenticationConfiguration configuration) throws Exception{
		return configuration.getAuthenticationManager();
		
	}  
	
	/*
	 * @Override protected void configure(HttpSecurity http) throws exception {
	 * http.csrf().disable().authorizeHttpRequests().anyRequest().authenticated().
	 * and().httpBasic(); }
	 * 
	 * @Override protected void configuer(AuthenticationManager auth) throws
	 * Exception{
	 * auth.userDetailsService(this.customUserDetailsService).passwordEncoder(); }
	 */
	
	@Bean
	public DaoAuthenticationProvider daoAuthenticationProvider() {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(this.customUserDetailsService);
		provider.setPasswordEncoder(passwordEncoder());
		return provider;
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
}

