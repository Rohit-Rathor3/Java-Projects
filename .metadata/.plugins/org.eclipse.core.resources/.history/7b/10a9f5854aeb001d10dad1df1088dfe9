package com.rohit.blog.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.rohit.blog.payloads.ApiResponse;
import com.rohit.blog.payloads.UserDto;
import com.rohit.blog.services.UserService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/users/")
@Validated
public class UserController {

	@Autowired
	private UserService userService;
	
	
	// Post - create user
	@PostMapping("/")
	public ResponseEntity<UserDto> createUser(@Valid @RequestBody UserDto userDto){
		UserDto createdUserDto = this.userService.createUser(userDto);
		System.out.println(createdUserDto.toString());
		return new ResponseEntity<>(createdUserDto,HttpStatus.CREATED);
	}
	
	// Put - update user
	@PutMapping("/{id}")
	public ResponseEntity<UserDto> updateUser(@RequestBody UserDto userDto, @PathVariable("id") Integer id ){
		UserDto updatedUser = this.userService.updateUser(userDto, id);
		return ResponseEntity.ok(updatedUser);
	}
	
	// Delete - delete user
	@DeleteMapping("/{id}")
	public ResponseEntity<?>  deleteUser(@PathVariable("id") Integer id){
		this.userService.deleteUser(id);
		return new ResponseEntity( new ApiResponse("User deleted sucessfully",true), HttpStatus.OK);
		
	}
	
	// GET - get all users
	@GetMapping("/")
	public ResponseEntity<List<UserDto>> getAllUsers(){
		return ResponseEntity.ok(this.userService.getAllUsers());
	}
	
	// GET - get single  user
		@GetMapping("/{id}")
		public ResponseEntity<UserDto> getSingleUser(@PathVariable("id") Integer id){
			return ResponseEntity.ok(this.userService.getUserById(id));
		}
	}


